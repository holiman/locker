
# ----------     code   ----------------

        # owner should be already pushed to stack at this point.
        # if msg.sender is not owner, just return
        
        push20 0xfffffffffffffffffffffffffffffffffffffffe        # [owner]
        caller          # [owner, caller]
        eq              # [caller == owner]
        iszero          # [caller != owner]
        push1 exit      # [caller != owner, label:exit ]
        jumpi           # []


        # At this point, caller == owner.

        calldatasize    # [calldatasize]
        iszero          # [calldatasize == 0]
        push2 payout    # [calldatasize == 0, payout-label]
        jumpi


        # fallthrough, owner sent a new schedule
        #
        # slot[0] = amount << 128 | (time+week) 
        #

        push0            # [0]
        calldataload     # [calldata[0..32]]
        push1 128        # [calldata[0..32], 128]
        shl              # [amount << 128]
        timestamp        # [amount << 128, timestamp]
        push3 0x93a80    # [ amount << 128, timestamp, week_seconds] // 60 * 60 * 24 * 7 seconds 
        add              # [ amount << 128, timestamp + week_seconds]
        or               # [ amount << 128 || timestamp + week_seconds] 
        push0            # [ amount << 128 || timestamp + week_seconds, 0]
        sstore           # []
        push1 exit
        jump

payout: 
        jumpdest
        push0            # [0]
        sload            # [slot_0 ]
        dup1             # [slot_0, slot_0]
        push4 0xffffffff # [slot_0, slot_0, 0xffffffff]
        and              # [slot_0, release_time]
        timestamp        # [slot_0, release_time, timestamp]
        gt               # [slot_0, release_time < timestamp]
        push1 do_payout  # [slot_0, release_time < timestamp, do_payout-label] 
        jumpi
        push1 panic
        jump

do_payout:
        jumpdest
        push1 128        # [slot_0, 128]
        shr              # [ value ]
        push0            # [ value, 0 ]
        push0            # [ value, 0, 0 ]
        push0            # [ value, 0, 0, 0 ]
        push0            # [ value, 0, 0, 0, 0 ]
        swap4            # [ 0, 0, 0, 0, value]

        caller           # [ 0, 0, 0, 0, value, address]  
        gas              # [ 0, 0, 0, 0, value, address, gas]
        
        push0            
        push0 
        sstore           # slot[0] = 0

        call             # [ call status (0 = failure, 1 = success)]
        push1 exit       # [ call_sucess?, exit-label ]
        jumpi            # []

        # otherwise fall through to panic
panic:
        jumpdest
        push0
        push0
        revert # revert (0,0)

exit:
        jumpdest
        push0
        push0
        return
